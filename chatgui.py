import streamlit as st
import nltk
from nltk.stem import WordNetLemmatizer
import pickle
import numpy as np
from keras.models import load_model
import json
import random

# Download necessary NLTK resources
# 'punkt' is used for tokenization of sentences into words
nltk.download('punkt')

# 'wordnet' is used for lemmatization with WordNet
nltk.download('wordnet')

# Initialize the lemmatizer
lemmatizer = WordNetLemmatizer()

# Load the pre-trained model for the chatbot
model = load_model('chatbot_model.h5')

# Load the intents data from a JSON file
intents = json.loads(open('intents.json').read())

# Load the vocabulary and class data using pickle
words = pickle.load(open('words.pkl', 'rb'))
classes = pickle.load(open('classes.pkl', 'rb'))

def clean_up_sentence(sentence):
    """
    Tokenize and lemmatize the input sentence.
    
    Parameters:
    - sentence (str): The input sentence to be processed.
    
    Returns:
    - list: A list of lemmatized words from the input sentence.
    """
    # Tokenize the sentence into words
    sentence_words = nltk.word_tokenize(sentence)
    
    # Lemmatize each word to its base form
    sentence_words = [lemmatizer.lemmatize(word.lower()) for word in sentence_words]
    
    return sentence_words

def bow(sentence, words, show_details=True):
    """
    Create a bag-of-words representation of the input sentence.
    
    Parameters:
    - sentence (str): The input sentence to be converted to a bag-of-words.
    - words (list): The list of known words (vocabulary).
    - show_details (bool): Whether to print details of words found in the bag.
    
    Returns:
    - np.array: A numpy array representing the bag-of-words.
    """
    sentence_words = clean_up_sentence(sentence)
    
    # Initialize the bag with zeros
    bag = [0] * len(words)
    
    # Set bag positions to 1 for words found in the sentence
    for s in sentence_words:
        for i, w in enumerate(words):
            if w == s:
                bag[i] = 1
                if show_details:
                    print("found in bag: %s" % w)
    
    return np.array(bag)

def predict_class(sentence, model):
    """
    Predict the class of the input sentence using the trained model.
    
    Parameters:
    - sentence (str): The input sentence for classification.
    - model (keras.Model): The trained chatbot model.
    
    Returns:
    - list: A list of predicted intents with their probabilities.
    """
    # Convert the sentence to a bag-of-words representation
    p = bow(sentence, words, show_details=False)
    
    # Ensure the input is the expected shape for the model
    p = np.expand_dims(p, axis=0)
    
    # Predict the probabilities of each class
    res = model.predict(p)[0]
    
    ERROR_THRESHOLD = 0.25
    results = [[i, r] for i, r in enumerate(res) if r > ERROR_THRESHOLD]
    results.sort(key=lambda x: x[1], reverse=True)
    
    return_list = []
    for r in results:
        return_list.append({"intent": classes[r[0]], "probability": str(r[1])})
    
    return return_list

def getResponse(ints, intents_json):
    """
    Get a response from the intents data based on the predicted intent.
    
    Parameters:
    - ints (list): A list of predicted intents.
    - intents_json (dict): The intents data loaded from the JSON file.
    
    Returns:
    - str: A response from the chatbot based on the intent.
    """
    tag = ints[0]['intent']
    list_of_intents = intents_json['intents']
    
    for i in list_of_intents:
        if i['tag'] == tag:
            result = random.choice(i['responses'])
            break
    
    return result

def chatbot_response(msg):
    """
    Generate a response from the chatbot based on the user message.
    
    Parameters:
    - msg (str): The user input message.
    
    Returns:
    - str: The response generated by the chatbot.
    """
    # Predict the class of the message
    ints = predict_class(msg, model)
    
    # Get the response based on the predicted class
    res = getResponse(ints, intents)
    
    return res

# Streamlit GUI setup
st.title("Chatbot")

# Initialize the message list in the session state if not already present
if 'messages' not in st.session_state:
    st.session_state['messages'] = []

def send_message():
    """
    Send a message and update the chat log with the user's input and the bot's response.
    """
    user_input = st.session_state['input']
    if user_input:
        st.session_state.messages.append(f"You: {user_input}")
        
        # Get the chatbot's response
        bot_response = chatbot_response(user_input)
        
        # Append the response to the chat log
        st.session_state.messages.append(f"Bot: {bot_response}")
        st.session_state.input = ''

# Display the chat log
st.text_area("Chat Log", value="\n".join(st.session_state['messages']), height=400, max_chars=None, key="chat_log", disabled=True)

# Input field for the user to type their message
st.text_input("Type your message", key='input')

# Button to send the message
st.button("Send", on_click=send_message)
